"""Лямбда-функции

Они анонимны, но все же являются представителями первого
гражданами первого класса и могут быть присвоены 
переменной.
Они имеют свой собственный синтаксис.
● В них используется лямбда вместо def.
● У них нет имени.
● Им не нужны круглые скобки.
● В них не используется ключевое слово return.
● Они не могут использовать несколько строк.
Лямбда-функции - это специальные 
анонимные функции, определяемые как
выражения
"""
add1 = lambda x: x + 1(add1(1))
2
 # Это эквивалентно
def add1(x):
    return x + 1
 
    print(add1(1))





add1 = lambda x: x + 1
"""входные параметры. В качестве входных параметров может 
быть любое число или 0.
Выходной параметр.
"""


"""Они могут принимать любое количество аргументов.
Они могут принимать любое количество аргументов.
Они помогают сделать код более 
лаконичным.
Определение лямбда-функции и присвоение ее 
сразу же присвоить ее имени переменной не рекомендуется 
не рекомендуется руководством по стилю PEP-8.
Лямбда-функции"""
multiply = lambda x, y: x * y
print(multiply(1, 0))
0
print(multiply(3, 9))
27
def printer(bar):
    return lambda x: f"{bar}, {x}!"

greet = printer("Hello")
print(greet("John"))




"""
Часто используется в закрытиях и декораторах или 
в качестве аргументов для передачи в функции более высокого порядка 
функциям более высокого порядка.
Лямбда-функции
Они помогают сделать код более 
лаконичность и предотвращают создание 
имени переменной, которое не требуется.
"""
def make_uppercase(func):
    return lambda x: func().upper()

@make_uppercase
def greeting():

    return "Hello World!"
print( greeting() )


"""

Что мы можем вызывать функции как изнутри другой функции, так и 
так и из той же функции.
● Что рекурсивные функции должны определять базовый случай, чтобы 
прекращения рекурсии.
● Что они работают в два этапа: углубление и обратное вычисление 
вычисления.
● Что функции могут быть вложенными и содержаться внутри других функций. 
функции.
● Что функции являются гражданами первого класса и могут присваиваться 
переменным и передавать их в качестве аргументов.
● Что закрытия - это функции, которые возвращают функцию, и эта функция 
имеет доступ к первой области видимости функции.
● Что декораторы - это закрывающие функции, принимающие в качестве аргумента функцию 
аргумент.
● Как работать с аргументами функций и декораторов.
● Как создавать анонимные функции с помощью лямбда-функций 
функции"""

























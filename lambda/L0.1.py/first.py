"""clean_text (lambda) -–º—ã —á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É).
–†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é re.findall().–ü–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—Å—Ç–∞ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.
–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ—Ç —Å–ª–æ–≤–∞. - re.findall(r'\b\w+\b', text.lower()).get_top_words (lambda) ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –¥–ª–∏–Ω–µ (filter()),
–∑–∞—Ç–µ–º —Å—á–∏—Ç–∞–µ–º –∏—Ö —á–∞—Å—Ç–æ—Ç—É —Å –ø–æ–º–æ—â—å—é Counter(), –∞ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é.–°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã.
–¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç top_n —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –Ω–∞–º –ø–æ–∑–≤–æ–ª—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–∏–±–æ–ª–µ–µ 
—á–∞—Å—Ç—ã–º —Å–ª–æ–≤–∞–º.filter(lambda word: len(word) >= min_length, words) ‚Äî —É–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞.
Counter() ‚Äî —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–ª–æ–≤. 
sorted(..., key=lambda item: item[1], reverse=True) ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã.
–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ analyze_text(), —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ.
analyze_text(text)-- –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–¥–µ—Å—å –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞. analyze_text(text) --–∏—Å–ø–æ–ª—å–∑—É–µ—Ç clean_text() 
clean_text(text) ‚Äî –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
top_words = get_top_words(words) ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤. –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ø-5 —Å–ª–æ–≤
analyze_text(text)--—ç—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞.–û–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç
clean_text()-–∞–Ω–∞–ª–∏–∑ –∏ get_top_words() - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç—ã.
–í add_one (lambda) - –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —á–∏—Å–ª–æ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ 1. 
is_even –∏ is_odd (lambda)-- –ø—Ä–æ–≤–µ—Ä—è—é—Ç, —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ.
–≤ @decorator (lambda)- –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—ë 
–∏ –¥–æ–±–∞–≤–ª—è–µ–º print() –¥–æ –∏ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
import sys
import re
from collections import Counter

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
sys.stdout.reconfigure(encoding='utf-8')

# === –ß–∞—Å—Ç—å 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ ===
# –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
clean_text = lambda text: re.findall(r'\b\w+\b', text.lower())

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
get_top_words = lambda words, min_length=3, top_n=5: sorted(
    Counter(filter(lambda word: len(word) >= min_length, words)).items(),
    key=lambda item: item[1], 
    reverse=True
)[:top_n]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
def analyze_text(text):
    words = clean_text(text)
    top_words = get_top_words(words)
    
    print("\n\U0001F4CA –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
    print(f"\U0001F538 –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(words)}")
    print("\U0001F538 –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤:")
    for word, freq in top_words:
        print(f"   - {word}: {freq} —Ä–∞–∑(–∞)")


sample_text = "–ù–µ–ª—å–∑—è, —á—Ç–æ–± —Å—Ç—Ä–∞—Ö –ø–æ–≤–µ–ª–µ–≤–∞–ª —É–º—É;–ò–Ω–∞—á–µ –º—ã –æ—Ç—Ö–æ–¥–∏–º –æ—Ç —Å–≤–µ—Ä—à–µ–Ω–∏–π,–ö–∞–∫ –∑–≤–µ—Ä—å, –∫–æ–≥–¥–∞ –º–µ—Ä–µ—â–∏—Ç—Å—è –µ–º—É."
analyze_text(sample_text)



add_one = lambda x: x + 1
print(add_one(2))  # –í—ã–≤–æ–¥: 3


add_numbers = lambda x, y: x + y
print(add_numbers(2, 3))  # –í—ã–≤–æ–¥: 5


hello = lambda: "–ü—Ä–∏–≤–µ—Ç, lambda!"
print(hello())  # –í—ã–≤–æ–¥: "–ü—Ä–∏–≤–µ—Ç, lambda!"


power = lambda x, y: x ** y
print(power(2, 5)) 

is_even = lambda x: x % 2 == 0
is_odd = lambda x: x % 2 != 0
print(is_even(4), is_odd(5))  # –í—ã–≤–æ–¥: True 


numbers = [1, 2, 3, 4]
double = list(map(lambda x: x * 2, numbers))
print(double)  

def outer_function(x):
    return lambda y: x + y

add_five = outer_function(5)
print(add_five(10))  # –í—ã–≤–æ–¥: 15


decorator = lambda func: lambda: (print("‚ú® –î–æ —Ñ—É–Ω–∫—Ü–∏–∏"), func(), print("‚ú® –ü–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏"))

@decorator
def my_func():
    print("üöÄ –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏")

my_func()

"""Списки - это базовая реализация линейных коллекций в Python линейных коллекций. 
Они:
- Имеют порядок.
- Допускают дублирование значений.
- Позволяют изменять свои объекты 
изменяться.
- Допускают объекты разных типов
Для их определения используются квадратные скобками [].Любая итерируемая переменная может быть преобразована 
в список список с помощью конструктора списка.Конструктор списков также может быть использован для создания 
пустых списков, если не указан аргумент задан. Вывод будет таким же, как и при использовании 
пустые квадратные скобки []
"""
import datetime


fridge = [
     "Apple", "Apple",
     "Cabbage", "Steak",
     "Cheese", "Apple",
     "Carrot", "Carrot",
     "Iogurt", "Beer"
 ]

hello = list("hello")
print(hello)
['h', 'e', 'l', 'l', 'o']
empty_fridge = list()
print(empty_fridge)
[]


"""

Списки могут содержать значения любого 
типа.
Элементы списка могут быть смешанного 
типы.
Сами элементы также могут 
быть списками.
Списки целых чисел могут быть 
сгенерировать с помощью
range(start, end, step)"""

fridge = ["Apple", "Apple"]
letters = list("hello")
ages = [32, 45, 42, 12, 34, 57]
dates = [datetime, datetime]
data = ["John", 32, datetime]
lists = [
    ["John", "Mary", "Amy"],
    [32, 43, 51]
]
sequence = range(2, 10, 3)
print(sequence)
[2, 5, 8]

"""

При печати списка его значения будут отображаться в в том же порядке, который использовался при 
список был определен.Доступ к каждому значению в списке можно получить 
используя его числовую позицию в списке (начиная с нуля). Эта позиция называется 
индекс.Нарезка может быть использована для доступа к частям списка или изменить его порядок.
"""
print(fridge)
['Apple', 'Apple', 'Cabbage',...]
print(fridge[0])
print(fridge[4])
print(fridge[0:2])
['Apple', 'Apple']
print(fridge[-2:])
['Iogurt', 'Beer']
print(fridge[::-1])
['Beer', 'Iogurt', 'Carrot',...]


"""

Использование индексов для доступа к спискам или их фрагментации 
полезно, когда мы их знаем, но это часто это не так, и необходимо иметь механизм 
для поиска значений должен быть доступен.Это можно сделать с помощью метода 
index, который возвращает индекс первого вхождения в списке.
Количество вхождений значения можно получить с помощью метода countметод"""

print(fridge.index('Carrot'))

print(fridge[6])

print(fridge.count('Apple'))



"""

Порядок списка может быть изменен на противоположный с помощью нарезки, если мы не хотим делать 
изменения постоянными.Метод reverse сделает изменение 
изменение постоянным для исходного и вернет None
"""
print(fridge[::-1])
['Beer', 'Iogurt', 'Carrot',...]
print(fridge)
['Apple', 'Apple', 'Cabbage',...]
print(fridge.reverse())
None
print(fridge)
['Beer', 'Iogurt', 'Carrot',...]

"""

Список также может быть отсортирован по возрастанию 
или по убыванию. Метод сортировки может может быть использован для изменения порядка следования 
элементов в соответствии с их значениями.Аргумент reverse может быть использован для 
изменить порядок сортировки на обратный.Это сокращение для использования сначала sort(), а затем reverse()
"""
print(fridge.sort())
None
print(fridge)
['Apple', 'Apple', 'Apple',...]
fridge.sort(reverse=True)
print(fridge)
['Steak', 'Iogurt', 'Cheese',...]
fridge.sort()
fridge.reverse()
print(fridge)
['Steak', 'Iogurt', 'Cheese',...]


"""

Значения в коллекции могут быть Изменять значения в коллекции можно с помощью индексов.
Набор смежных значений может быть изменен также может быть изменен одной инструкцией.Установка значения в None не приводит
 к удалению значение из списка.
Установка значения в пустой список не приведет также не удалит значение
"""
fridge[0] = 'Beer'
print(fridge)
['Beer', 'Apple', 'Cabbage',...]
fridge[0:2] = ['Juice']
print(fridge)
['Juice', 'Cabbage', 'Steak',...]
fridge[0] = None
print(fridge)
[None, 'Cabbage', 'Steak',...]
fridge[0] = []
print(fridge)
[[], 'Cabbage', 'Steak',...]





"""Добавление новых значений может быть выполнено с помощью метода append. Значения добавляются 
в конце.Добавление новых значений с помощью метода append не приводит к изменению индекса 
других значений.Два или более списков могут быть также конкатенировать с помощью оператора +.  
Это эквивалентно использованию метода extend метода"""
fridge.append('Soda')
print(fridge[-2:])
['Beer', 'Soda']
eggs = ['Egg', 'Egg']
fridge = fridge + eggs
print(fridge[-4:])
['Beer', 'Soda', 'Egg', 'Egg']
fridge = fridge.extend(eggs)
print(fridge[-4:])
['Egg', 'Egg', 'Egg', 'Egg']




"""Новые значения могут быть добавлены и в другие позиции списка с помощью метода insert
метод.Позиция, в которую будет вставлено значение вставляться, указывается в качестве первого аргумента 
а затем в качестве второго аргумента указывается вставляемое значение второй аргумент.
"""
fridge = [
    "Apple", "Apple",
    "Cabbage", "Steak",
    "Cheese", "Apple",
    "Carrot", "Carrot",
    "Iogurt", "Beer"
]
fridge.insert(1, 'Pie')
print(fridge)
['Apple', 'Pie', 'Apple', ...]




"""Удаление значений может быть выполнено с помощью метода pop. Значения удаляются из конца и возвращаются, которые могут 
затем присвоить другой переменной name.Метод pop принимает аргумент который будет являться индексом значения, которое 
удаляется и возвращается.Метод remove находит первое вхождение заданного значения и удаляет его из списка.
 При этом возвращается None"""

last_item = fridge.pop()
print(fridge[-2:])
['Carrot', 'Iogurt']
print(last_item)
#Beer
first_item = fridge.pop(0)
print(fridge)
['Pie', 'Apple', 'Cabbage',...]
print(fridge.remove('Apple'))
#None
print(fridge)
['Pie', 'Cabbage', 'Steak',...]





"""Сравнение двух списков вернет True, если 
следующие утверждения верны для 
элементов в нем:
- Они одинаковые
- Они расположены в одинаковом порядке
"""
list1 = [1, 2, 3]
list2 = [1, 2, 3]
list1 == list2
list1 is list2
list3 = [3, 2, 1]
list1 == list3
list1 == list3[::-1]
list4 = [1, 1, 2, 2, 3, 3]
list1 == list4


"""Lists have a variety of methods:
Add
- Append
- Extend
- Insert
Remove
- Pop
- Remove
Search & Analyze
- Index
- Count
Sort
- Sort
- Reverse
"""


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































